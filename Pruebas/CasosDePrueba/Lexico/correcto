{
    **posibles identificadores

    SHORT var1,
    _var2 = 2_s,
    _var_3 = 3_s,
    _var_4_ = 4_s,
    _var5_prueba_1 = 5_s,
    _var6_prueba2_ = 6_s,
    var7_ = 7_s,
    var_8 = 8_s,
    var_9_ = 9_s,
    var10_prueba_3 = 10_s,
    var11_prueba4_ = 11_s,
    var12__ = 12_s,
    var13__a = 13_s,
    v4ri4_b13 = 14_s,
    variable_de_20_carac = 20_s,


    ** posibles constantes

    rango_menor_s = -128_s,
    rango_mayor_s = 127_s,
    nro_intermedio_s = 34_s,
    ULONG rango_menor_ul = 0_ul,
    nro_intermedio_ul = 1654563_ul,
    rango_mayor_ul = 4294967295_ul,
    rango1_punto_flot = 2.2250738585072014D-308,
    rango2_punto_flot = 1.7976931348623157D+308,
    rango3_punto_flot = -1.7976931348623157D+308,
    rango4_punto_flot = -2.2250738585072014D-308,
    rango5_punto_flot = 0.0,

    ** ejemplos validos punto flotante de 64 bits

    DOUBLE _ej1 = 1.,
    _ej2 = .6,
    _ej3 = -1.2,
    _ej4 = 3.d-5,
    _ej5 = 2.D+34,
    _ej6 = 2.5D-1,
    _ej7 = 13.,
    _ej8 = 0.,
    _ej9 =  1.2d+10,


    ** operadores aritmeticos

    operador_suma = 5_s + 5_s,
    operador_resta = 10_s - 8_s,
    operador_mult = 2_s * 2_s,
    operador_div = 64_s / 8_s,
    operador_menosigual = 20_s,
    operador_menosigual -= operador_suma,


    ** comparadores

    10_s >= 5_s,
    10_s <= 5_s,
    10_s > 5_s,
    10_s < 5_s,
    10_s == 5_s,
    10_s !! 5_s,

    ** simbolos {} , () , ',' , . , ; , :
    IF (operador_suma > operador_mult) {} END_IF,
    FOR i IN RANGE (0_s;10_s;1_s) {},
    IMPL FOR ca: {},


    ** palabras reservadas
    IF,
    ELSE,
    END_IF,
    PRINT,
    CLASS,
    VOID,
    SHORT,
    ULONG,
    DOUBLE,
    FOR,
    IN,
    RANGE,
    IMPL,
    INTERFACE,
    IMPLEMENT,

    ** comentarios de una linea con muchos simbolos 156/&?-*/#"!¿

    ** cadenas multilinea
    % ¡Hola
    mundo! %,
}